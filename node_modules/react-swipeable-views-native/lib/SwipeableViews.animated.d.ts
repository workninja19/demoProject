import * as React from 'react';
import { Animated, ViewStyle } from 'react-native';
interface Props {
    animateHeight?: boolean;
    animateTransitions?: boolean;
    axis?: 'x' | 'x-reverse' | 'y' | 'y-reverse';
    containerStyle?: ViewStyle;
    disabled?: boolean;
    hysteresis?: number;
    index?: number;
    onChangeIndex?: (index: number, fromIndex: number) => void;
    onSwitching?: (index: number, type: 'move' | 'end') => void;
    onTouchEnd?: (event: any, gestureState: any) => void;
    onTouchStart?: (event: any, gestureState: any) => void;
    onTransitionEnd?: () => void;
    resistance?: boolean;
    slideStyle?: ViewStyle;
    springConfig?: {
        friction: number;
        tension: number;
    };
    style?: ViewStyle;
    threshold?: number;
}
interface State {
    indexCurrent: Animated.Value;
    indexLatest: number;
    viewLength: number;
}
declare class SwipeableViews extends React.Component<Props, State> {
    static defaultProps: {
        animateTransitions: boolean;
        disabled: boolean;
        hysteresis: number;
        index: number;
        resistance: boolean;
        springConfig: {
            tension: number;
            friction: number;
        };
        threshold: number;
    };
    panResponder: any;
    startX: number;
    startIndex: number;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: any): void;
    handleAnimationFinished: (params: any) => void;
    handleTouchStart: (event: any, gestureState: any) => void;
    handleTouchMove: (event: any, gestureState: any) => void;
    handleTouchEnd: (event: any, gestureState: any) => void;
    handleLayout: (event: any) => void;
    animateIndexCurrent(index: any): void;
    render(): JSX.Element;
}
export default SwipeableViews;
